#include<iostream>
#include<map>
#include<string>
#include<cstring>
#include<vector>
#include<fstream>
#include<queue>

#define DEFLATE_NUM_PRECODE_SYMS		19
#define DEFLATE_MAX_MATCH_LEN			258
typedef unsigned char u8;

using namespace std;

// lengths value
/* Table: length slot => length slot base value */
static const unsigned deflate_length_slot_base[] = {
	3,    4,    5,    6,    7,    8,    9,    10,
	11,   13,   15,   17,   19,   23,   27,   31,
	35,   43,   51,   59,   67,   83,   99,   115,
	131,  163,  195,  227,  258,
};

// lengths bits
/* Table: length slot => number of extra length bits */
static const u8 deflate_extra_length_bits[] = {
	0,    0,    0,    0,    0,    0,    0,    0,
	1,    1,    1,    1,    2,    2,    2,    2,
	3,    3,    3,    3,    4,    4,    4,    4,
	5,    5,    5,    5,    0,
};


// distance value
/* Table: offset slot => offset slot base value */
static const unsigned deflate_offset_slot_base[] = {
	1,     2,     3,     4,     5,     7,     9,     13,
	17,    25,    33,    49,    65,    97,    129,   193,
	257,   385,   513,   769,   1025,  1537,  2049,  3073,
	4097,  6145,  8193,  12289, 16385, 24577,
};

// distance bits
/* Table: offset slot => number of extra offset bits */
static const u8 deflate_extra_offset_bits[] = {
	0,     0,     0,     0,     1,     1,     2,     2,
	3,     3,     4,     4,     5,     5,     6,     6,
	7,     7,     8,     8,     9,     9,     10,    10,
	11,    11,    12,    12,    13,    13,
};

/* Table: length => length slot */
static const u8 deflate_length_slot[DEFLATE_MAX_MATCH_LEN + 1] = {
	0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12,
	12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16,
	16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 28,
};

/*
 * A condensed table which maps offset => offset slot as follows:
 *
 *	offset <= 256: deflate_offset_slot[offset]
 *	offset > 256: deflate_offset_slot[256 + ((offset - 1) >> 7)]
 *
 * This table was generated by scripts/gen_offset_slot_map.py.
 */
static const u8 deflate_offset_slot[512] = {
	0, 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7,
	7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
	9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21,
	22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
};

/* The order in which precode codeword lengths are stored */
static const u8 deflate_precode_lens_permutation[DEFLATE_NUM_PRECODE_SYMS] = {
	16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
};

int len = 0;
size_t total_bit = 0;
int bits = 0;

void emitBytes(ofstream& fout)
{
  while (len >= 8)
  {
    int num = (bits >> (len - 8)) & 0xff;
    char *c = (char *)&num;
	fout.write(c, sizeof(char) * 1);
	// cout << "num = " << num << endl;
	// cout << "*c = " << strlen(c) << endl;
	// cout << "strlen(chararray) = " << strlen(chararray) << endl;
    // strncat(chararray, c, 1);
	// cout << "strlen(chararray) = " << strlen(chararray) << endl;
    len -= 8;
    bits >>= 8;
  }
}

void emitBits(ofstream& fout, int bit, int l)
{
  bits <<= l;
  bits |= bit;
  len += l;
  total_bit += l;
  emitBytes(fout);
}

size_t HashCode (const std::string &str) {
    size_t h = 0;
    for (size_t i = 0; i < str.size(); ++i)
        h = h * 31 + size_t(str[i]);
    return h;
}

map<size_t, size_t> pos_hash_map;
map<size_t, queue<int>> hash_pos_map;

void literal_to_bits(ofstream& fout, const char* chars, int len){
	for(int i = 0; i < len; i++){
		char ch = chars[i];
		int num = ch - '0';
		if(num <= 143){
			num = (num + 0b00110000) & 0b11111111;
			emitBits(fout, num, 8);
		}else{
			num -= 144;
			num = (num + 0b110010000) & 0b111111111;
			emitBits(fout, num, 9);
		}
	}
    
}
void distance_len_to_bits(ofstream &fout, size_t distance, size_t len){
	int len_idx = 0;
	int len_diff = 0;
	// 找到长度对应字段索引
	for(size_t i = 0; i < 29; i++){
		if(len >= deflate_length_slot_base[i]){
			len_idx = i;
			len_diff = len - deflate_length_slot_base[i];
			break;
		}
	}
	if(len < 115){
		int len_num = len_idx + 0b0000001;
		int len_extra = deflate_extra_length_bits[len_idx];
		len_num <<= len_extra;
		len_num |= (len_diff);
		int len_total_bit = 7 + len_extra;
		emitBits(fout, len_num, len_total_bit);
	}else{
		int len_num = len_idx - 115 + 0b11000000;
		int len_extra = deflate_extra_length_bits[len_idx];
		len_num <<= len_extra;
		len_num |= (len_diff);
		int len_total_bit = 8 + len_extra;
		emitBits(fout, len_num, len_total_bit);
	}
	int dist_idx = 0;
	int dist_diff = 0;
	for(size_t i = 0; i < 30; i++){
		if(distance >= deflate_offset_slot_base[i]){
			dist_idx = i;
			dist_diff = distance - deflate_offset_slot_base[i];
			break;
		}
	}
	int dist_extra_bit = deflate_extra_offset_bits[dist_idx];
	int dist_num = dist_idx;//5 bits
	dist_num <<= dist_extra_bit;
	dist_num |= dist_diff;
	int dist_total_bit = 5 + dist_extra_bit;
	emitBits(fout, dist_num, dist_total_bit);
    
}

pair<size_t, size_t> str_match(const string& buffer, const string& str, int str_start_pos){
	/*
	计算[i,i+4)的hash
	枚举hash表内所有hash值相等的pos:
	//此时说明[i,i+4)与[pos,pos+4)有很大概率相等
	从i开始逐字节比较，得到最长匹配长度
	返回最长匹配长度和位置
	*/
	size_t hash = HashCode(str.substr(0, 4));
	if(hash_pos_map.count(hash)){
		queue<int> que = hash_pos_map[hash];
		int que_size = que.size();
		int idx = 0, length = 0;
		for(int i = 0; i < que_size; i++){
			int pos = que.front();
			que.pop();
			
			int cnt = 0;
			int str_len = str.size();
			while(cnt < str_len && buffer[pos + cnt] == str[cnt] && pos + cnt < str_start_pos){
				cnt ++;
			}
			if(cnt >= length){
				length = cnt;
				idx = pos;
			}

			que.push(pos);
		}
		return {idx, length};
	}else{
		return {-1, -1};
	}
    
}

void update_hash(string buffer, size_t i){
	/*
		更新hash：
		把i-32768之前位置的hash从字典当中删除
		计算[i,i+4)的hash并放入hash表
	*/
	for(auto iter = pos_hash_map.rbegin(); iter != pos_hash_map.rend() && iter -> first >= i - 32768; iter++){
		size_t hash = iter -> second;
		queue<int>q = hash_pos_map[hash];

		while(!q.empty() && q.front() < i - 32768){
			q.pop();
		}
		pos_hash_map.erase(iter->first);

     }
	size_t hashcode = HashCode(buffer.substr(i, 4));
	pos_hash_map[i] = hashcode;
	hash_pos_map[hashcode].push(i);
    return;
}


bool lz77(ofstream& fout, const char * buffer){
    
    size_t max_len = strlen(buffer);
	// cout << "buffer = " << buffer << endl;
	
    string buffer_str = buffer;
	// cout << "buffer_str = " << buffer_str << endl;
	string out = "";
    if(!buffer){
        cerr << "The input char pointer is nullptr" << endl;
        cout << "Error in line " << __LINE__ << " in function " << __FUNCTION__ << " of file " << __FILE__ << endl;
        return false;
    }
    for(size_t i = 0; i < max_len;){
		
        size_t idx = 0, len = 0;
        if(i + 5 >= max_len){// 剩余空间 <= 5, 直接发射

            // out += buffer_str.substr(i);
			
			int len = max_len - i;
			literal_to_bits(fout, buffer + i, len);
			break;
			
        }else if(str_match(buffer_str, buffer_str.substr(i), i).first != -1){ // 字符串匹配
            
			idx = str_match(buffer_str, buffer_str.substr(i), i).first;
            len = str_match(buffer_str, buffer_str.substr(i), i).second;
			idx = i-idx;
		
            // cout << "idx = " <<idx << "len = " << len << endl;
            distance_len_to_bits(fout, idx, len);
			// string res = "("+to_string(idx)+","+to_string(len)+")";
            // out += res;
            
			for(int j = 0; j < len; j ++){
                update_hash(buffer_str, i + j);
            }

            i += len;
        }else{ // 字符串不匹配，直接发射
			
            // out += buffer_str[i];
			literal_to_bits(fout, buffer + i, 1);
            update_hash(buffer_str, i);
            i++;
        }
    }
	// cout << "out = " << out << endl;
	// output = out.data();
	
    return true;
}

int main(){
	ifstream fin("demo.txt");
	fin.seekg(0, ios::end);
	int length = fin.tellg();
	fin.seekg(0, ios::beg);
    char* buffer = new char[length + 1];
    memset(buffer, 0, sizeof(char) * (length + 1));
    fin.read(buffer, length);

	ofstream fout("demo_output.txt");
	
	lz77(fout, buffer);
	
	//结束
	emitBits(fout, 0, 7);
	
	// 字节补齐
	int remain_bit = (total_bit / 8 + 1) * 8 - total_bit;
	if(remain_bit){
		emitBits(fout, 0, remain_bit);
	}
	
	fout.close();
	fin.close();

	ifstream fin2("demo_output.txt");
	fin2.seekg(0, ios::end);
	length = fin2.tellg();
	cout << "The length of demo_output.txt = " << length << endl;
	fin2.close();
	
	return 0;
	

}


